import streamlit as st
import requests
import datetime

BASE_URL = "http://localhost:8000"  # Backend endpoint

st.set_page_config(
    page_title="ü•ó Nutritionist Meal Suggestion App",
    page_icon="ü•ó",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("ü•ó AI Nutritionist Meal Planner")
st.header("Get your personalized diet plan")

# Nutrition details form
with st.form("nutrition_form"):
    col1, col2 = st.columns(2)

    with col1:
        age = st.number_input("Age", min_value=1, max_value=120, step=1, value=25)
        gender = st.selectbox("Gender", ["male", "female", "other"], index=0)
        height_cm = st.number_input("Height (cm)", min_value=50, max_value=250, step=1, value=170)
        weight_kg = st.number_input("Weight (kg)", min_value=10, max_value=300, step=1, value=70)

    with col2:
        activity_level = st.selectbox(
            "Activity Level",
            ["sedentary", "light", "moderate", "very_active"],
            index=1,
        )
        sleep_hours = st.number_input("Average Sleep Hours", min_value=1.0, max_value=14.0, step=0.5, value=7.0)

    medical_conditions = st.text_area(
        "Medical Conditions (comma separated)", placeholder="e.g. diabetes, hypertension"
    )
    medications = st.text_area(
        "Medications (comma separated)", placeholder="e.g. metformin, thyroxine"
    )
    allergies = st.text_area(
        "Allergies (comma separated)", placeholder="e.g. lactose, peanuts"
    )

    dietary_pattern = st.selectbox(
        "Dietary Pattern",
        ["omnivore", "vegetarian", "vegan", "pescatarian", "eggetarian"],
        index=0,
    )
    dislikes = st.text_area("Foods you dislike (comma separated)", placeholder="e.g. broccoli, mushrooms")
    likes = st.text_area("Foods you love (comma separated)", placeholder="e.g. chicken, paneer")
    religious_restrictions = st.text_area(
        "Religious Restrictions (comma separated)", placeholder="e.g. halal, kosher"
    )

    col3, col4 = st.columns(2)
    with col3:
        meals_per_day = st.number_input("Meals per day", min_value=2, max_value=7, step=1, value=3)
        budget = st.selectbox("Food Budget", ["low", "medium", "high"], index=1)

    with col4:
        cooking_skill = st.selectbox(
            "Cooking Skill", ["beginner", "intermediate", "advanced"], index=1
        )
        goals = st.multiselect(
            "Health Goals",
            ["weight_loss", "muscle_gain", "wellness", "medical_condition_control"],
            default=["wellness"],
        )

    output_wants = st.multiselect(
        "What do you want in the plan?",
        ["calories", "macros", "recipes", "shopping_list"],
        default=["calories", "macros", "recipes"],
    )

    submit_button = st.form_submit_button("Generate Meal Plan ü•ó")

if submit_button:
    try:
        with st.spinner("AI Nutritionist is preparing your personalized plan..."):
            payload = {
                "age": age,
                "gender": gender,
                "height_cm": height_cm,
                "weight_kg": weight_kg,
                "activity_level": activity_level,
                "sleep_hours": sleep_hours,
                "medical_conditions": [c.strip() for c in medical_conditions.split(",") if c.strip()],
                "medications": [m.strip() for m in medications.split(",") if m.strip()],
                "allergies": [a.strip() for a in allergies.split(",") if a.strip()],
                "dietary_pattern": dietary_pattern,
                "dislikes": [d.strip() for d in dislikes.split(",") if d.strip()],
                "likes": [l.strip() for l in likes.split(",") if l.strip()],
                "religious_restrictions": [r.strip() for r in religious_restrictions.split(",") if r.strip()],
                "meals_per_day": meals_per_day,
                "budget": budget,
                "cooking_skill": cooking_skill,
                "output_wants": output_wants,
                "goals": goals,
            }

            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""
# ü•ó Personalized Meal Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** AI Nutritionist  

**User Profile**  
- Age: {age}  
- Gender: {gender}  
- Height: {height_cm} cm  
- Weight: {weight_kg} kg  
- Activity Level: {activity_level}  
- Sleep Hours: {sleep_hours}  
- Goals: {", ".join(goals)}  
- Budget: {budget}  
- Cooking Skill: {cooking_skill}  
- Dietary Pattern: {dietary_pattern}  

---

{answer}

---

*This meal plan was generated by AI. Please consult a licensed healthcare professional before making medical or dietary changes.*
"""
            st.markdown(markdown_content)
        else:
            st.error("‚ùå Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"The response failed due to: {e}")
